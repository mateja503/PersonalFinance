// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PersonalFinance.Repository.Data;

#nullable disable

namespace PersonalFinance.Repository.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("PersonalFinance.Domain.Identity.AccountUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("PersonalFinance.Domain.Models.AccountUserBudget", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AccountUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("BudgetId")
                        .HasColumnType("int");

                    b.Property<int?>("Categoryid")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AccountUserId");

                    b.HasIndex("BudgetId");

                    b.HasIndex("Categoryid");

                    b.ToTable("AccountUserBudgets");
                });

            modelBuilder.Entity("PersonalFinance.Domain.Models.AccountUserFinancialGoals", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AccountUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("FinancialGoalsId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AccountUserId");

                    b.HasIndex("FinancialGoalsId");

                    b.ToTable("AccountUserFinancialGoals");
                });

            modelBuilder.Entity("PersonalFinance.Domain.Models.Budget", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("BudgetMonth")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("budgetAmount")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("Budgets");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BudgetMonth = new DateTime(2024, 4, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            budgetAmount = 100m
                        });
                });

            modelBuilder.Entity("PersonalFinance.Domain.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("categoryName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            categoryName = "Намирници-Храна"
                        },
                        new
                        {
                            Id = 2,
                            categoryName = "Плата"
                        });
                });

            modelBuilder.Entity("PersonalFinance.Domain.Models.FinancialGoals", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("amountGoal")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("goalReachInTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("goalText")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.HasKey("Id");

                    b.ToTable("FinancialGoals");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            amountGoal = 21000m,
                            goalReachInTime = new DateTime(2024, 8, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            goalText = "Потребни ми се 21.000$ за целосно опремување на стан"
                        });
                });

            modelBuilder.Entity("PersonalFinance.Domain.Models.Note", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.ToTable("Notes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Text = "Купено Леб,Сирење,Чајна"
                        },
                        new
                        {
                            Id = 2,
                            Text = "Плата од фирма Апдомен чувај за стан!!!!"
                        });
                });

            modelBuilder.Entity("PersonalFinance.Domain.Models.Transaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("TransactionType")
                        .HasColumnType("int");

                    b.Property<decimal>("amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("dateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Transactions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            TransactionType = 2,
                            amount = 200m,
                            dateTime = new DateTime(2024, 4, 17, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 2,
                            TransactionType = 1,
                            amount = 500m,
                            dateTime = new DateTime(2024, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("PersonalFinance.Domain.Models.TransactionNotes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("NoteId")
                        .HasColumnType("int");

                    b.Property<int?>("TransactionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("NoteId");

                    b.HasIndex("TransactionId");

                    b.ToTable("TransactionNotes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            NoteId = 1,
                            TransactionId = 1
                        },
                        new
                        {
                            Id = 2,
                            NoteId = 2,
                            TransactionId = 2
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("PersonalFinance.Domain.Identity.AccountUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("PersonalFinance.Domain.Identity.AccountUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PersonalFinance.Domain.Identity.AccountUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("PersonalFinance.Domain.Identity.AccountUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PersonalFinance.Domain.Models.AccountUserBudget", b =>
                {
                    b.HasOne("PersonalFinance.Domain.Identity.AccountUser", "AccountUser")
                        .WithMany("AccountUserBudgetList")
                        .HasForeignKey("AccountUserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("PersonalFinance.Domain.Models.Budget", "Budget")
                        .WithMany("AccountUserBudgetList")
                        .HasForeignKey("BudgetId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("PersonalFinance.Domain.Models.Category", "Category")
                        .WithMany("AccountUserBudgetList")
                        .HasForeignKey("Categoryid")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("AccountUser");

                    b.Navigation("Budget");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("PersonalFinance.Domain.Models.AccountUserFinancialGoals", b =>
                {
                    b.HasOne("PersonalFinance.Domain.Identity.AccountUser", "AccountUser")
                        .WithMany("AccontUserFinancialGoalList")
                        .HasForeignKey("AccountUserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PersonalFinance.Domain.Models.FinancialGoals", "FinancialGoals")
                        .WithMany("AccountUserFinancialGoalList")
                        .HasForeignKey("FinancialGoalsId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("AccountUser");

                    b.Navigation("FinancialGoals");
                });

            modelBuilder.Entity("PersonalFinance.Domain.Models.Transaction", b =>
                {
                    b.HasOne("PersonalFinance.Domain.Models.Category", "Category")
                        .WithMany("TransactionList")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Category");
                });

            modelBuilder.Entity("PersonalFinance.Domain.Models.TransactionNotes", b =>
                {
                    b.HasOne("PersonalFinance.Domain.Models.Note", "Note")
                        .WithMany("TransactionNoteList")
                        .HasForeignKey("NoteId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("PersonalFinance.Domain.Models.Transaction", "Transaction")
                        .WithMany("TransactionNoteList")
                        .HasForeignKey("TransactionId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Note");

                    b.Navigation("Transaction");
                });

            modelBuilder.Entity("PersonalFinance.Domain.Identity.AccountUser", b =>
                {
                    b.Navigation("AccontUserFinancialGoalList");

                    b.Navigation("AccountUserBudgetList");
                });

            modelBuilder.Entity("PersonalFinance.Domain.Models.Budget", b =>
                {
                    b.Navigation("AccountUserBudgetList");
                });

            modelBuilder.Entity("PersonalFinance.Domain.Models.Category", b =>
                {
                    b.Navigation("AccountUserBudgetList");

                    b.Navigation("TransactionList");
                });

            modelBuilder.Entity("PersonalFinance.Domain.Models.FinancialGoals", b =>
                {
                    b.Navigation("AccountUserFinancialGoalList");
                });

            modelBuilder.Entity("PersonalFinance.Domain.Models.Note", b =>
                {
                    b.Navigation("TransactionNoteList");
                });

            modelBuilder.Entity("PersonalFinance.Domain.Models.Transaction", b =>
                {
                    b.Navigation("TransactionNoteList");
                });
#pragma warning restore 612, 618
        }
    }
}
